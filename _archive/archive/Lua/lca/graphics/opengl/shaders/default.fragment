float ambientStrength = 0.2;
vec4 lightColor = white;

vec4 ambient(vec4 materialColor) {
    vec3 ambient = ambientStrength * lightColor.rgb;
    return vec4(ambient, 1.0) * materialColor;
}

vec4 diffuse(vec4 materialColor) {
    vec3 lightDirection = vec3(0.0, 10.0, -10.0) - vPosition;
    
    vec3 unitNormal = normalize(aNormal);
    vec3 unitLightDirection = normalize(lightDirection);
    
    float nDot = dot(unitNormal, unitLightDirection);
    float brightness = max(nDot, 0.0);
    
    vec3 diffuse = brightness * lightColor.rgb;
            
    return vec4(diffuse, 1.0) * materialColor;
}

void main() {
    highp vec4 materialColor;
    highp vec4 texColor = white;
    
    if (useTexture == 1) {
        texColor = texture(uSampler, vTexCoord);
        materialColor = tintColor;
        
    } else if (useColors > 0) {
        materialColor = vColor;
        
    } else {
        materialColor = fillColor;
    }
    
    if (useLight == 1) {                
        fragColor = (ambient(materialColor) + diffuse(materialColor)) * texColor;
        
    } else {
        fragColor = materialColor * texColor;
    }
}
