attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoords;
attribute vec4 color;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform vec3 pos;
uniform vec3 size;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform float time;

uniform float freq1;
uniform float freq2;
uniform float freq3;

uniform float octave1;
uniform float octave2;
uniform float octave3;

uniform int n;

out vec3 vPosition;
out vec3 vNormal;
out vec3 aNormal;
out vec4 vColor;
out vec2 vTexCoords;

out float elevation;

out float minElevation;
out float maxElevation;

float lerp(float a, float b, float t) {
    return a + (b - a) * t;
}

float quadIn(float a, float b, float t) {
    return a + (b - a) * pow(t, 2.);
}

float noise(vec2 v) {
    int e = 10;
    
    ivec2 vnorm = ivec2(floor(v/float(e))) * e;
    
    ivec2 va = ivec2(vnorm.x  , vnorm.y  );
    ivec2 vb = ivec2(vnorm.x  , vnorm.y+e);
    ivec2 vc = ivec2(vnorm.x+e, vnorm.y  );
    ivec2 vd = ivec2(vnorm.x+e, vnorm.y+e);
    
    float a = snoise(va);
    float b = snoise(vb);
    float c = snoise(vc);
    float d = snoise(vd);
    
    v = (v - vec2(vnorm)) / float(e);
    
    a = lerp(a, b, v.y);
    c = lerp(c, d, v.y);
    
    c = lerp(a, c, v.x);
    
    return (c + 1.) / 2.;
}

float d = 0.;
float r = 250.;

float getElevation(vec2 xz) {
    float elevation = d + r * (
        noise(xz / freq1) * octave1 +
        noise(xz / freq2) * octave2 +
        noise(xz / freq3) * octave3);
        
    return elevation;
}

const float seaElevation = 100.;

const float landMinElevation = 120.;
const float landMaxElevation = 150.;

vec4 rock = vec4(90./255., 77./255., 65./255., 1.);

void main() {
    float x = float(gl_InstanceID % n);
    float z = float(gl_InstanceID / n);
    
    vec3 vertex2 = vertex * size + pos + vec3(x * size.x, 0., z * size.z);

    vec4 vertexPosition = matrixModel * vec4(vertex2, 1.0);

    elevation = getElevation(vertexPosition.xz);
        
    minElevation = d;
    maxElevation = minElevation + (octave1 + octave2 + octave3) * r;
    
    if (elevation <= seaElevation) {
        vertexPosition.y = seaElevation + sin(time * noise(vertexPosition.xz));
        vColor = blue;
    } else if (elevation <= landMinElevation) {
        vertexPosition.y = elevation;
        vColor = vec4(224./255., 205./255., 169./255., 1.);
    } else if (elevation <= landMaxElevation) {
        vertexPosition.y = quadIn(landMinElevation, landMaxElevation, (elevation-landMinElevation)/(landMaxElevation-landMinElevation));
        vColor = vec4(178./255., 215./255., 185./255., 1.);
    } else {
        vertexPosition.y = elevation;
        vColor = rock;
    }
    
    vColor += vec4(vec3(lerp(-0.01, 0.1, snoise(vertex2.xz))), 1.);

    vPosition = vertexPosition.xyz;
    vNormal = (matrixModel * vec4(normal, 0.0)).xyz;

    vTexCoords = texCoords;
//    if (useColor > 0) {
//        vColor = color;
//    } else {
//        vColor = stroke;
//    }
    
    float elevation1 = getElevation(vertexPosition.xz+vec2(1., 0.));
    float elevation2 = getElevation(vertexPosition.xz+vec2(0., 1.));
    float elevation3 = getElevation(vertexPosition.xz+vec2(-.7, -0.7));
    
    vNormal = cross(
        vec3(0., elevation2, 1.)-vec3(-0.7, elevation3, -0.7),
        vec3(1., elevation1, 0.)-vec3(-0.7, elevation3, -0.7));

    aNormal = mat3(transpose(inverse(matrixModel))) * vNormal;

    gl_Position = matrixPV * vertexPosition;
}
