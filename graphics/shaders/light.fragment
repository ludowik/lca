uniform float iTime;

uniform vec3 cameraPos;
vec3 cameraToLight;

varying vec3 FragPos;
varying vec3 VaryingNormal;

vec3 norm;

struct Light {
    vec3 position;
    vec3 direction;
    
    vec4 color;
    
    float ambientStrength;
    float diffuseStrength;
    float specularStrength;
};

uniform Light light[10];

struct Material {
    float ambientStrength;
    float diffuseStrength;
    float specularStrength;

    float shininess;

    float alpha;
};

uniform Material material;

vec4 ambient(Light light) {    
    vec4 ambient = light.ambientStrength * light.color;
    return ambient;
}

vec4 diffuse(Light light) {
    float diff = max(dot(norm, cameraToLight), 0.0);
    
    vec4 diffuse = light.diffuseStrength * diff * light.color;
    return diffuse;
}

vec4 specular(Light light) {
    float specularStrength = 0.5;
    
    vec3 viewDir = normalize(cameraPos - FragPos);
    vec3 reflectDir = reflect(-cameraToLight, norm);  

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32.);
    
    vec4 specular = light.specularStrength * spec * vec4(1., 0., 0., 1.); 
    return specular;
}

vec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)
{    
    vec4 texcolor = Texel(tex, texture_coords);
    
    norm = normalize(VaryingNormal);
    cameraToLight = normalize(light[0].position - FragPos);
    
    vec4 result = vec4(0.);
    for (int i=0; i<2; ++i) {
        result += vec4((
            ambient(light[i]) +
            diffuse(light[i]) +
            specular(light[i])).xyz, 1.) * (texcolor * color);
    }
    
    return result;
}
