uniform float iTime;
uniform vec3 cameraPos;

varying vec3 FragPos;
varying vec3 VaryingNormal;

vec3 lightPos;
vec3 lightColor = vec3(1., 1., 1.);

vec3 norm;
vec3 lightDir; 

vec3 ambient() {
    float ambientStrength = 0.5;
    
    vec3 ambient = ambientStrength * lightColor;
    return ambient;
}

vec3 diffuse() {
    float diff = max(dot(norm, lightDir), 0.0);
    
    vec3 diffuse = diff * lightColor;
    return diffuse;
}

vec3 specular() {
    float specularStrength = 0.5;
    
    vec3 viewDir = normalize(cameraPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  

    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    
    vec3 specular = specularStrength * spec * vec3(1., 0., 0.); 
    return specular;
}

vec4 effect(vec4 color, Image tex, vec2 texture_coords, vec2 screen_coords)
{    
    lightPos = vec3(cos(iTime), sin(iTime), -2.);

    vec4 texcolor = Texel(tex, texture_coords);
    
    norm = normalize(VaryingNormal);
    lightDir = normalize(lightPos - FragPos);
    
    vec4 result = vec4((ambient() + diffuse() + specular()).xyz, 1.) * (texcolor * color);    
    return result;
}
