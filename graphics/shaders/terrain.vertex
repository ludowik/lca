attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texCoords;
attribute vec4 color;

uniform mat4 matrixModel;
uniform mat4 matrixPV;

uniform vec4 fill;
uniform vec4 stroke;
uniform vec4 tint;

uniform vec3 pos;
uniform vec3 size;

uniform int useLight;
uniform int useColor;
uniform int useTexture;

uniform float freq1;
uniform float freq2;
uniform float freq3;

uniform float octave1;
uniform float octave2;
uniform float octave3;

out vec3 vPosition;
out vec3 vNormal;
out vec3 aNormal;
out vec4 vColor;
out vec2 vTexCoords;

out float elevation;

out float minElevation;
out float maxElevation;

void main() {
    mat4 mm = matrixModel;

    float d = distance(vertex.xyz , vec3(0.0, 0.0, 0.0));
    elevation = d + 100. * (
        0.1 + snoise(vertex.xyz / freq1) * octave1 +
        snoise(vertex.xyz * freq2) * octave2 +
        snoise(vertex.xyz * freq3) * octave3
    );
    
    minElevation = d;
    maxElevation = d + (octave1 + octave2 + octave3) * 100.;

    vec4 position = vec4(normalize(vertex.xyz) * elevation, 1.0);

    vec4 worldPosition = mm * vec4(position.xyz, 1.0);
    vec3 worldNormal = (mm * vec4(normal, 0.0)).xyz;

    vPosition = worldPosition.xyz;
    vNormal = worldNormal;

    vTexCoords = texCoords.xy;
    if (useColor > 0) {
        vColor = color;
    } else {
        vColor = stroke;
    }

    aNormal = mat3(transpose(inverse(matrixModel))) * vNormal;

    gl_Position = matrixPV * matrixModel * position;
}
